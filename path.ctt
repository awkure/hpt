module path where

Path (A : U) (a0 a1 : A) : U = PathP (<i> A) a0 a1

refl (A : U) (a : A) : Path A a a = <i> a 

trans (A B : U) (p : Path U A B) (a : A) : B = comp p a []
transNeg (A B : U) (p : Path U A B) (b : B) : A = comp (<i> p @ -i) b []
-- trEq (A B : U) (p : Path U A B) (a : A) : Path (transport A B p a) (trans A B p a) = ?

section (A B : U) (f : A -> B) (g : B -> A) : U = (b : B) -> Path B (f (g b)) b
retract (A B : U) (f : A -> B) (g : B -> A) : U = (a : A) -> Path A (g (f a)) a
