module path where

Path (A : U) (a0 a1 : A) : U = PathP (<i> A) a0 a1

refl (A : U) (a : A) : Path A a a = <i> a 

trans (A B : U) (p : Path U A B) (a : A) : B = comp p a []
transNeg (A B : U) (p : Path U A B) (b : B) : A = comp (<i> p @ -i) b []
-- trEq (A B : U) (p : Path U A B) (a : A) : Path (transport A B p a) (trans A B p a) = ?

compPath (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c = 
  <i> comp (<_> A) (p @ i) [ (i=0) -> <j> a, (i=1) -> q ]

