module equiv where 

import proto
import square 

isEquiv (A B : U) (f : A -> B) : U = (y : B) -> isContr (fiber A B f y)

equiv (A B : U) : U = (f : A -> B) * isEquiv A B f 
equivNeg (A B : U) (e : equiv A B) (y : B) : A = (e.2 y).1.1

idIsEquiv (A : U) : isEquiv A A (idfun A) = \(a : A) -> ((a,<i> a), \(z : fiber A A (idfun A) a) -> contrSingl A a z.1 z.2)
idEquiv   (A : U) : equiv   A A           = (idfun A,idIsEquiv A)

transEquiv (A B : U) (p : Path U A B) : equiv A B = subst U (equiv A) A B p (idEquiv A)

ua (A B : U) (e : equiv A B) : Path U A B = <i> Glue B [ (i=0) -> (A,e), (i=1) -> (B,idEquiv B) ]


lemIso (A B: U) (f: A -> B) (g: B -> A) (s: section A B f g) (t: retract A B f g)
       (y: B) (x0 x1: A) (p0: Path B y (f x0)) (p1: Path B y (f x1))
     : Path (fiber A B f y) (x0,p0) (x1,p1) = <i> (p @ i,sq1 @ i) where
  rem0: Path A (g y) x0 = <i> comp (<k> A) (g (p0 @ i)) [ (i = 1) -> t x0, (i = 0) -> <k> g y ]
  rem1: Path A (g y) x1 = <i> comp (<k> A) (g (p1 @ i)) [ (i = 1) -> t x1, (i = 0) -> <k> g y ]
  p:    Path A x0 x1    = <i> comp (<k> A) (g y)        [ (i = 0) -> rem0, (i = 1) -> rem1 ]
  fill0: Square A (g y)(g (f x0)) (g y) x0 (<i> g (p0 @ i)) rem0 (<i> g y) (t x0) =
         <i j> comp (<k> A) (g (p0 @ i)) [ (i = 1) -> <k> t x0 @ j /\ k,
                                           (i = 0) -> <k> g y,
                                           (j = 0) -> <k> g (p0 @ i) ]
  fill1: Square A(g y)(g(f x1))(g y) x1 (<i>g (p1@i)) rem1 (<i> g y) (t x1) =
         <i j> comp (<k> A) (g (p1 @ i)) [ (i = 1) -> <k> t x1 @ j /\ k,
                                           (i = 0) -> <k> g y,
                                           (j = 0) -> <k> g (p1 @ i) ]
  fill2: Square A (g y) (g y) x0 x1 (<k> g y) p rem0 rem1 =
                <i j> comp (<k> A) (g y) [ (i = 0) -> <k> rem0 @ j /\ k,
                                           (i = 1) -> <k> rem1 @ j /\ k,
                                           (j = 0) -> <k> g y ]
  sq: Square A(g y)(g y)(g(f x0))(g(f x1))(<i>g y) (<i>g (f(p@i)))(<j>g(p0@j))(<j>g(p1@j)) =
      <i j> comp (<k> A) (fill2 @ i @ j) [ (i = 0) -> <k> fill0 @ j @ -k,
                                           (i = 1) -> <k> fill1 @ j @ -k,
                                           (j = 0) -> <k> g y,
                                           (j = 1) -> <k> t (p @ i) @ -k ]
  sq1: Square B y y (f x0) (f x1) (<k>y) (<i> f (p @ i)) p0 p1 =
      <i j> comp (<k> B) (f (sq @ i @j)) [ (i = 0) -> s (p0 @ j),
                                           (i = 1) -> s (p1 @ j),
                                           (j = 1) -> s (f (p @ i)),
                                           (j = 0) -> s y ]

isoToEquiv (A B : U) (f : A -> B) (g : B -> A) (s : section A B f g) (t : retract A B f g) : isEquiv A B f
  = \(y : B) -> ((g y,<i> s y @ -i) , \(z : fiber A B f y) -> lemIso A B f g s t y (g y) z.1 (<i> s y @ -i) z.2)

isoPath (A B : U) (f : A -> B) (g : B -> A) (s : section A B f g) (t : retract A B f g) : Path U A B
  = <i> Glue B [ (i = 0) -> (A , f , isoToEquiv A B f g s t) , (i = 1) -> (B , idfun B , idIsEquiv B) ]
