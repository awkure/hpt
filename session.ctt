module session where

import proto
import sigma
import bool
import desc 

-- boolInd (A : U) (f t : A) : bool -> A = split { ff -> f ; tt -> t }

mutual 
    data Skeleton (I : U) (J : I -> U) (b : bool) = var (_ : boolInd unit undefined b) (i : I) -- TODO : error here 
                                                  | kon (A : U) 
                                                  | sg (S : Skeleton I J b) (T : Approx I J b S -> Skeleton I J b) 
                                                  | op (S : Skeleton I J (notb b)) 

    Approx (I : U) (J : I -> U) (b : bool) : Skeleton I J b -> U = split 
        var i   -> J i
        kon A   -> A 
        sg  S T -> unit -- (s : S) * T s
        op    T -> Approx I J (notb b) T -- TODO : Trans equiv Approx I J b T
        
mutual 
    Traffic (I : U) (J : I -> U) (b : bool) (F : I -> Skeleton I J b) (f : (i : I) -> Approx I J b (F i) -> J i) (i : I) : U 
        = Node I J b F f (F i)

    Node (I : U) (J : I -> U) (b : bool) (F : I -> Skeleton I J b) (f : (i : I) -> Approx I J b (F i) -> J i) : Skeleton I J b -> U = split 
        var i   -> Traffic I J b F f i
        kon A   -> A 
        sg  S T -> (n : Node I J b S) * (\(n : Node I J b S) -> Node I J b (T (approx I J b F f S s)))
        op    T -> Node I J b T
        
    approx (I : U) (J : I -> U) (b : bool) (F : I -> Skeleton I J b) (f : (i : I) -> Approx I J b (F i) -> J i) 
         : (S : Skeleton I J b) -> (N : Node I J b F f S) -> Approx I J b S = split 
            var i -> f i (approx I J b F f (F i) t)
            kon A -> idFun 
            sg S T -> \(N : Node I J b F f D) -> and s' (approx I J b F f (T s') N.2) where s' = approx I J b F f S N.1
            pi   T -> \(t : _) -> approx I J b F f T t
            
mutual 
    Client (I : U) (J : I -> U) (b : bool) (F : I -> Skeleton I J b) (f : (i : I) -> Approx I J b (F i) -> J i) (i : I) : U 
        = ClientNode I J b F f (F i)
        
    ClientNode (I : U) (J : I -> U) (b : bool) (F : I -> Skeleton I J b) (f : (i : I) -> Approx I J b (F i) -> J i) : Skeleton I J b -> U = split 
        var i   -> Client I J b F f i
        kon A   -> A 
        sg  S T -> (N : ClientNode I J b F f S) 
                 * (\(N : ClientNode I J b F f S) 
                     (SB : ServerNodeBroadcast I J b F f S N) -> ClientNode I J b F f (T (approx I J b F f S (clientNodeTraffic s)))
        op    T -> ServerNode I J b F f T
        
    Server (I : U) (J : I -> U) (b : bool) (F : I -> Skeleton I J b) (f : (i : I) -> Approx I J b (F i) -> J i) (i : I) : U 
        = ServerNode I J b F f (F i)
        
    ServerNode (I : U) (J : I -> U) (b : bool) (F : I -> Skeleton I J b) (f : (i : I) -> Approx I J b (F i) -> J i) : Skeleton I J b -> U = split 
        var i   -> Server I J b F f i 
        kon A   -> A 
        sg  S T -> (N : ServerNode I J b F f S) 
                 * (\(N : ServerNode I J b F f S)
                     (CB : ClientNodeBroadcast I J b F f S N) -> ServerNode I J b F f (T (approx I J b F f S (serverNodeTraffic s))))
        op    T -> ClientNode I J b F f T
        
            
        
-- mutual 
--     Client (I : U) (J : I -> U) (b : bool) : Skeleton I J b -> U = ClientNode I J F f (F i)
--     ClientNode (I : U) (J : I -> U) (F : I -> Skeleton) (b : bool) 
