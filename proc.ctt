{- Copyright (c) Groupoid Infinity, 2014-2019. -}

module proc where 

import proto 
import sigma
import list 

storage : U -> U = list 

process : U
        = (protocol state : U)               -- Process Signature
        * (current :    and protocol state)  -- In-Memory State
        * (act : idfun (and protocol state)) -- Monoidal Action
        * (storage     (and protocol state)) -- In-Storage Signed Chain

spawn (protocol state : U) (init : and protocol state) (action : id (and protocol state)) : process = (protocol,state,init,action,nil)

protocol  (p : process) : U = p.1
context   (p : process) : U = p.2.1
signature (p : process) : U = and p.1 p.2.1
current   (p : process) :          signature p  = p.2.2.1
action    (p : process) :   idfun (signature p) = p.2.2.2.1
trace     (p : process) : storage (signature p) = p.2.2.2.2

send    (p : process) (message : protocol p) : unit       = undefined
receive (p : process)                        : protocol p = undefined
execute (p : process) (message : protocol p) : process
      = let step : signature p = (action p) (message, (current p).2)
         in (protocol p, context p, step, action p, cons step (trace p))

data PING  = ping | pong
data STATE = init | stop | run
simple : process = spawn PING STATE (ping,init) (\(_ : prod PING STATE)->(pong,run))
run (p : process) (start : protocol p) : process
  = let a : process = execute p start
        b : process = execute a (current a).1
        c : process = execute b (current b).1
     in c

